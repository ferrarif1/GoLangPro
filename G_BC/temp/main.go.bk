package main

import (
	"context"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"

	"github.com/ethereum/go-ethereum/ethclient"
)

func main() {
	client, err := ethclient.Dial("http://10.45.21.31:8123")
	if err != nil {
		log.Fatal(err)
	}

	// 查询chain id
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("chainID: ", chainID)

	// 查新最新的bn
	bn, err := client.BlockNumber(context.Background())
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("the latest bn: ", bn)

	// 查新block num
	blockNumber := big.NewInt(int64(bn) - 1)
	block, err := client.BlockByNumber(context.Background(), blockNumber)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("block BaseFee: ", block.BaseFee())
	fmt.Println("block ParentHash: ", block.Header().ParentHash)
	fmt.Println("block Transactions[0] hash: ", block.Transactions()[0].Hash())

	// 根据block hash 查询block
	b1, err := client.BlockByHash(context.Background(), block.Hash())
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("b1 Transactions[0] hash: ", b1.Transactions()[0].Hash())

	// 根据 hash 查询 transaction
	tx, isPending, err := client.TransactionByHash(context.Background(), b1.Transactions()[0].Hash())
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("isPending: ", isPending)
	fmt.Println("tx Gas: ", tx.Gas())
	fmt.Println("tx GasPrice: ", tx.GasPrice())
	fmt.Println("tx Cost: ", tx.Cost())
	fmt.Println("tx type: ", tx.Type())
	fmt.Println(tx.Data())
	fmt.Println(hex.EncodeToString(tx.Data()))

	// 根据 txhash 查询recp
	recp, err := client.TransactionReceipt(context.Background(), b1.Transactions()[0].Hash())
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("recp GasUsed: ", recp.GasUsed)
	fmt.Println("recp CumulativeGasUsed: ", recp.CumulativeGasUsed)
	fmt.Println("recp Size: ", recp.Size())
	fmt.Println("recp Type: ", recp.Type)
	fmt.Println("recp TransactionIndex: ", recp.TransactionIndex)
}
